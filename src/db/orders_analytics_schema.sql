-- Orders and Analytics Schema for Nirchal Admin Dashboard
-- This file creates the necessary tables to replace hardcoded data in the admin dashboard

-- Customers table
CREATE TABLE customers (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id UUID REFERENCES auth.users(id) ON DELETE SET NULL,
    first_name VARCHAR(100) NOT NULL,
    last_name VARCHAR(100) NOT NULL,
    email VARCHAR(255) NOT NULL UNIQUE,
    phone VARCHAR(20),
    date_of_birth DATE,
    gender VARCHAR(10),
    is_active BOOLEAN DEFAULT true,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

-- Customer addresses table
CREATE TABLE customer_addresses (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    customer_id BIGINT REFERENCES customers(id) ON DELETE CASCADE,
    type VARCHAR(20) DEFAULT 'billing', -- 'billing', 'shipping'
    first_name VARCHAR(100) NOT NULL,
    last_name VARCHAR(100) NOT NULL,
    company VARCHAR(100),
    address_line_1 VARCHAR(255) NOT NULL,
    address_line_2 VARCHAR(255),
    city VARCHAR(100) NOT NULL,
    state VARCHAR(100) NOT NULL,
    postal_code VARCHAR(20) NOT NULL,
    country VARCHAR(100) DEFAULT 'India',
    is_default BOOLEAN DEFAULT false,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

-- Orders table
CREATE TABLE orders (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    order_number VARCHAR(50) NOT NULL UNIQUE,
    customer_id BIGINT REFERENCES customers(id) ON DELETE SET NULL,
    status VARCHAR(50) DEFAULT 'pending', -- 'pending', 'processing', 'shipped', 'delivered', 'cancelled', 'refunded'
    payment_status VARCHAR(50) DEFAULT 'pending', -- 'pending', 'paid', 'failed', 'refunded'
    payment_method VARCHAR(50), -- 'razorpay', 'stripe', 'cod', 'bank_transfer'
    payment_transaction_id VARCHAR(255),
    
    -- Pricing
    subtotal DECIMAL(10,2) NOT NULL DEFAULT 0,
    tax_amount DECIMAL(10,2) NOT NULL DEFAULT 0,
    shipping_amount DECIMAL(10,2) NOT NULL DEFAULT 0,
    discount_amount DECIMAL(10,2) NOT NULL DEFAULT 0,
    total_amount DECIMAL(10,2) NOT NULL DEFAULT 0,
    
    -- Billing address
    billing_first_name VARCHAR(100) NOT NULL,
    billing_last_name VARCHAR(100) NOT NULL,
    billing_company VARCHAR(100),
    billing_address_line_1 VARCHAR(255) NOT NULL,
    billing_address_line_2 VARCHAR(255),
    billing_city VARCHAR(100) NOT NULL,
    billing_state VARCHAR(100) NOT NULL,
    billing_postal_code VARCHAR(20) NOT NULL,
    billing_country VARCHAR(100) DEFAULT 'India',
    billing_phone VARCHAR(20),
    billing_email VARCHAR(255) NOT NULL,
    
    -- Shipping address
    shipping_first_name VARCHAR(100) NOT NULL,
    shipping_last_name VARCHAR(100) NOT NULL,
    shipping_company VARCHAR(100),
    shipping_address_line_1 VARCHAR(255) NOT NULL,
    shipping_address_line_2 VARCHAR(255),
    shipping_city VARCHAR(100) NOT NULL,
    shipping_state VARCHAR(100) NOT NULL,
    shipping_postal_code VARCHAR(20) NOT NULL,
    shipping_country VARCHAR(100) DEFAULT 'India',
    shipping_phone VARCHAR(20),
    
    -- Timestamps
    shipped_at TIMESTAMP WITH TIME ZONE,
    delivered_at TIMESTAMP WITH TIME ZONE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    
    -- Notes
    notes TEXT,
    admin_notes TEXT
);

-- Order items table
CREATE TABLE order_items (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    order_id BIGINT REFERENCES orders(id) ON DELETE CASCADE,
    product_id BIGINT REFERENCES products(id) ON DELETE SET NULL,
    product_variant_id BIGINT REFERENCES product_variants(id) ON DELETE SET NULL,
    
    -- Product details at time of order (for historical accuracy)
    product_name VARCHAR(255) NOT NULL,
    product_sku VARCHAR(100),
    variant_size VARCHAR(50),
    variant_color VARCHAR(50),
    variant_material VARCHAR(100),
    
    -- Pricing
    unit_price DECIMAL(10,2) NOT NULL,
    quantity INTEGER NOT NULL DEFAULT 1,
    total_price DECIMAL(10,2) NOT NULL,
    
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

-- Order status history table
CREATE TABLE order_status_history (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    order_id BIGINT REFERENCES orders(id) ON DELETE CASCADE,
    status VARCHAR(50) NOT NULL,
    comment TEXT,
    notify_customer BOOLEAN DEFAULT false,
    created_by UUID REFERENCES auth.users(id),
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

-- Product analytics/stats table
CREATE TABLE product_analytics (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    product_id BIGINT REFERENCES products(id) ON DELETE CASCADE,
    date DATE NOT NULL,
    views INTEGER DEFAULT 0,
    orders INTEGER DEFAULT 0,
    quantity_sold INTEGER DEFAULT 0,
    revenue DECIMAL(10,2) DEFAULT 0,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    
    -- Unique constraint to prevent duplicate entries for same product/date
    UNIQUE(product_id, date)
);

-- Daily analytics summary table
CREATE TABLE daily_analytics (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    date DATE NOT NULL UNIQUE,
    total_orders INTEGER DEFAULT 0,
    total_customers INTEGER DEFAULT 0,
    new_customers INTEGER DEFAULT 0,
    total_revenue DECIMAL(10,2) DEFAULT 0,
    total_products_sold INTEGER DEFAULT 0,
    average_order_value DECIMAL(10,2) DEFAULT 0,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

-- Inventory tracking table
CREATE TABLE inventory_history (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    product_variant_id BIGINT REFERENCES product_variants(id) ON DELETE CASCADE,
    change_type VARCHAR(50) NOT NULL, -- 'sale', 'restock', 'adjustment', 'return'
    quantity_change INTEGER NOT NULL, -- positive for increase, negative for decrease
    quantity_before INTEGER NOT NULL,
    quantity_after INTEGER NOT NULL,
    reference_type VARCHAR(50), -- 'order', 'manual', 'return'
    reference_id BIGINT, -- order_id or other reference
    notes TEXT,
    created_by UUID REFERENCES auth.users(id),
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

-- Create indexes for better performance
CREATE INDEX idx_orders_customer_id ON orders(customer_id);
CREATE INDEX idx_orders_status ON orders(status);
CREATE INDEX idx_orders_created_at ON orders(created_at);
CREATE INDEX idx_orders_order_number ON orders(order_number);

CREATE INDEX idx_order_items_order_id ON order_items(order_id);
CREATE INDEX idx_order_items_product_id ON order_items(product_id);

CREATE INDEX idx_product_analytics_product_id ON product_analytics(product_id);
CREATE INDEX idx_product_analytics_date ON product_analytics(date);

CREATE INDEX idx_daily_analytics_date ON daily_analytics(date);

CREATE INDEX idx_inventory_history_variant_id ON inventory_history(product_variant_id);
CREATE INDEX idx_inventory_history_created_at ON inventory_history(created_at);

-- Insert sample customers
INSERT INTO customers (first_name, last_name, email, phone) VALUES
('Priya', 'Sharma', 'priya.sharma@email.com', '+91 98765 43210'),
('Arjun', 'Patel', 'arjun.patel@email.com', '+91 98765 43211'),
('Meera', 'Singh', 'meera.singh@email.com', '+91 98765 43212'),
('Rohit', 'Kumar', 'rohit.kumar@email.com', '+91 98765 43213'),
('Anita', 'Gupta', 'anita.gupta@email.com', '+91 98765 43214'),
('Vikram', 'Joshi', 'vikram.joshi@email.com', '+91 98765 43215');

-- Insert sample orders
INSERT INTO orders (order_number, customer_id, status, payment_status, payment_method, 
    subtotal, tax_amount, shipping_amount, total_amount,
    billing_first_name, billing_last_name, billing_address_line_1, billing_city, billing_state, billing_postal_code, billing_email,
    shipping_first_name, shipping_last_name, shipping_address_line_1, shipping_city, shipping_state, shipping_postal_code,
    created_at) VALUES
('ORD-001', 1, 'processing', 'paid', 'razorpay', 2124.15, 374.85, 0, 2499.00,
    'Priya', 'Sharma', '123 MG Road', 'Mumbai', 'Maharashtra', '400001', 'priya.sharma@email.com',
    'Priya', 'Sharma', '123 MG Road', 'Mumbai', 'Maharashtra', '400001',
    NOW() - INTERVAL '2 minutes'),
('ORD-002', 2, 'shipped', 'paid', 'stripe', 3644.07, 654.93, 0, 4299.00,
    'Arjun', 'Patel', '456 Park Street', 'Kolkata', 'West Bengal', '700016', 'arjun.patel@email.com',
    'Arjun', 'Patel', '456 Park Street', 'Kolkata', 'West Bengal', '700016',
    NOW() - INTERVAL '15 minutes'),
('ORD-003', 3, 'delivered', 'paid', 'cod', 1610.17, 288.83, 0, 1899.00,
    'Meera', 'Singh', '789 Brigade Road', 'Bangalore', 'Karnataka', '560001', 'meera.singh@email.com',
    'Meera', 'Singh', '789 Brigade Road', 'Bangalore', 'Karnataka', '560001',
    NOW() - INTERVAL '1 hour'),
('ORD-004', 4, 'processing', 'paid', 'razorpay', 3050.85, 548.15, 0, 3599.00,
    'Rohit', 'Kumar', '321 CP', 'New Delhi', 'Delhi', '110001', 'rohit.kumar@email.com',
    'Rohit', 'Kumar', '321 CP', 'New Delhi', 'Delhi', '110001',
    NOW() - INTERVAL '2 hours'),
('ORD-005', 5, 'delivered', 'paid', 'razorpay', 4237.29, 761.71, 0, 4999.00,
    'Anita', 'Gupta', '654 FC Road', 'Pune', 'Maharashtra', '411005', 'anita.gupta@email.com',
    'Anita', 'Gupta', '654 FC Road', 'Pune', 'Maharashtra', '411005',
    NOW() - INTERVAL '1 day'),
('ORD-006', 6, 'shipped', 'paid', 'stripe', 6779.66, 1219.34, 0, 7999.00,
    'Vikram', 'Joshi', '987 Mall Road', 'Shimla', 'Himachal Pradesh', '171001', 'vikram.joshi@email.com',
    'Vikram', 'Joshi', '987 Mall Road', 'Shimla', 'Himachal Pradesh', '171001',
    NOW() - INTERVAL '2 days');

-- Insert sample order items (assuming we have products with IDs 1-4)
INSERT INTO order_items (order_id, product_id, product_name, product_sku, unit_price, quantity, total_price) VALUES
(1, 1, 'Traditional Silk Saree', 'TSS-001', 2499.00, 1, 2499.00),
(2, 2, 'Designer Lehenga', 'DL-001', 4299.00, 1, 4299.00),
(3, 3, 'Casual Cotton Kurti', 'CCK-001', 1899.00, 1, 1899.00),
(4, 2, 'Designer Lehenga', 'DL-001', 3599.00, 1, 3599.00),
(5, 1, 'Traditional Silk Saree', 'TSS-001', 4999.00, 1, 4999.00),
(6, 2, 'Designer Lehenga', 'DL-002', 7999.00, 1, 7999.00);

-- Insert sample order status history
INSERT INTO order_status_history (order_id, status, comment, created_at) VALUES
(1, 'pending', 'Order placed', NOW() - INTERVAL '2 minutes'),
(1, 'processing', 'Payment confirmed, preparing for shipment', NOW() - INTERVAL '1 minute'),
(2, 'pending', 'Order placed', NOW() - INTERVAL '15 minutes'),
(2, 'processing', 'Payment confirmed', NOW() - INTERVAL '10 minutes'),
(2, 'shipped', 'Package dispatched', NOW() - INTERVAL '5 minutes'),
(3, 'pending', 'Order placed', NOW() - INTERVAL '1 hour'),
(3, 'processing', 'Payment on delivery confirmed', NOW() - INTERVAL '45 minutes'),
(3, 'shipped', 'Out for delivery', NOW() - INTERVAL '30 minutes'),
(3, 'delivered', 'Package delivered successfully', NOW() - INTERVAL '15 minutes');

-- Insert sample product analytics
INSERT INTO product_analytics (product_id, date, views, orders, quantity_sold, revenue) VALUES
(1, CURRENT_DATE, 150, 2, 2, 7498.00),
(2, CURRENT_DATE, 200, 3, 3, 15897.00),
(3, CURRENT_DATE, 80, 1, 1, 1899.00),
(1, CURRENT_DATE - INTERVAL '1 day', 120, 1, 1, 4999.00),
(2, CURRENT_DATE - INTERVAL '1 day', 180, 2, 2, 11898.00),
(3, CURRENT_DATE - INTERVAL '1 day', 95, 0, 0, 0),
(1, CURRENT_DATE - INTERVAL '2 days', 140, 1, 1, 2499.00),
(2, CURRENT_DATE - INTERVAL '2 days', 160, 1, 1, 7999.00);

-- Insert sample daily analytics
INSERT INTO daily_analytics (date, total_orders, total_customers, new_customers, total_revenue, total_products_sold, average_order_value) VALUES
(CURRENT_DATE, 6, 6, 6, 25294.00, 6, 4215.67),
(CURRENT_DATE - INTERVAL '1 day', 3, 3, 0, 16896.00, 3, 5632.00),
(CURRENT_DATE - INTERVAL '2 days', 2, 2, 0, 10498.00, 2, 5249.00),
(CURRENT_DATE - INTERVAL '3 days', 4, 4, 0, 18760.00, 4, 4690.00),
(CURRENT_DATE - INTERVAL '4 days', 5, 5, 0, 22350.00, 5, 4470.00);

-- Create functions to automatically update analytics

-- Function to update product analytics when an order is placed
CREATE OR REPLACE FUNCTION update_product_analytics()
RETURNS TRIGGER AS $$
BEGIN
    INSERT INTO product_analytics (product_id, date, orders, quantity_sold, revenue)
    VALUES (NEW.product_id, CURRENT_DATE, 1, NEW.quantity, NEW.total_price)
    ON CONFLICT (product_id, date)
    DO UPDATE SET
        orders = product_analytics.orders + 1,
        quantity_sold = product_analytics.quantity_sold + NEW.quantity,
        revenue = product_analytics.revenue + NEW.total_price,
        updated_at = CURRENT_TIMESTAMP;
    
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Function to update daily analytics when an order is placed
CREATE OR REPLACE FUNCTION update_daily_analytics()
RETURNS TRIGGER AS $$
BEGIN
    INSERT INTO daily_analytics (date, total_orders, total_revenue, total_products_sold, average_order_value)
    VALUES (CURRENT_DATE, 1, NEW.total_amount, 
        (SELECT COALESCE(SUM(quantity), 0) FROM order_items WHERE order_id = NEW.id),
        NEW.total_amount)
    ON CONFLICT (date)
    DO UPDATE SET
        total_orders = daily_analytics.total_orders + 1,
        total_revenue = daily_analytics.total_revenue + NEW.total_amount,
        total_products_sold = daily_analytics.total_products_sold + 
            (SELECT COALESCE(SUM(quantity), 0) FROM order_items WHERE order_id = NEW.id),
        average_order_value = (daily_analytics.total_revenue + NEW.total_amount) / (daily_analytics.total_orders + 1),
        updated_at = CURRENT_TIMESTAMP;
    
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Create triggers
CREATE TRIGGER trigger_update_product_analytics
    AFTER INSERT ON order_items
    FOR EACH ROW
    EXECUTE FUNCTION update_product_analytics();

CREATE TRIGGER trigger_update_daily_analytics
    AFTER INSERT ON orders
    FOR EACH ROW
    EXECUTE FUNCTION update_daily_analytics();

-- Create a view for recent orders with customer details
CREATE VIEW recent_orders_view AS
SELECT 
    o.id,
    o.order_number,
    o.status,
    o.payment_status,
    o.total_amount,
    o.created_at,
    c.first_name,
    c.last_name,
    c.email,
    CONCAT(c.first_name, ' ', c.last_name) as customer_name,
    CONCAT(UPPER(LEFT(c.first_name, 1)), UPPER(LEFT(c.last_name, 1))) as avatar_initials,
    CASE 
        WHEN o.created_at > NOW() - INTERVAL '5 minutes' THEN EXTRACT(EPOCH FROM (NOW() - o.created_at))/60 || ' mins ago'
        WHEN o.created_at > NOW() - INTERVAL '1 hour' THEN EXTRACT(EPOCH FROM (NOW() - o.created_at))/60 || ' mins ago'
        WHEN o.created_at > NOW() - INTERVAL '1 day' THEN EXTRACT(EPOCH FROM (NOW() - o.created_at))/3600 || ' hours ago'
        ELSE EXTRACT(EPOCH FROM (NOW() - o.created_at))/86400 || ' days ago'
    END as time_ago
FROM orders o
LEFT JOIN customers c ON o.customer_id = c.id
ORDER BY o.created_at DESC;

-- Create a view for top products
CREATE VIEW top_products_view AS
SELECT 
    p.id,
    p.name,
    COALESCE(SUM(pa.quantity_sold), 0) as total_sales,
    COALESCE(SUM(pa.revenue), 0) as total_revenue,
    CASE 
        WHEN LAG(SUM(pa.quantity_sold)) OVER (PARTITION BY p.id ORDER BY EXTRACT(DOW FROM pa.date)) IS NULL THEN '+0%'
        ELSE CONCAT('+', ROUND((SUM(pa.quantity_sold) - LAG(SUM(pa.quantity_sold)) OVER (PARTITION BY p.id ORDER BY EXTRACT(DOW FROM pa.date))) * 100.0 / NULLIF(LAG(SUM(pa.quantity_sold)) OVER (PARTITION BY p.id ORDER BY EXTRACT(DOW FROM pa.date)), 0), 0), '%')
    END as trend,
    pi.image_url
FROM products p
LEFT JOIN product_analytics pa ON p.id = pa.product_id AND pa.date >= CURRENT_DATE - INTERVAL '7 days'
LEFT JOIN product_images pi ON p.id = pi.product_id AND pi.is_primary = true
GROUP BY p.id, p.name, pi.image_url
HAVING COALESCE(SUM(pa.quantity_sold), 0) > 0
ORDER BY total_sales DESC
LIMIT 10;
